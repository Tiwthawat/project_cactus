'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import Link from 'next/link';

interface Auction {
  Aid: number;
  start_price: number;
  current_price: number;
  end_time: string; // 'YYYY-MM-DD HH:mm:ss' ‡∏´‡∏£‡∏∑‡∏≠ ISO
  status: 'open' | 'closed';
  PROid: number;
  PROname: string;
  PROpicture: string;
}


type Filter = 'all' | 'open' | 'closed';
const API = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:3000';

export default function AdminAuctionsPage() {
  const [auctions, setAuctions] = useState<Auction[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<Filter>('all');
  // ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
const [toasts, setToasts] = useState<Array<{ id: number; text: string }>>([]);
const notifiedRef = useRef<Set<number>>(new Set()); // ‡πÄ‡∏Å‡πá‡∏ö Aid ‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß

function pushToast(text: string) {
  const id = Date.now() + Math.floor(Math.random() * 1000);
  setToasts((ts) => [...ts, { id, text }]);
  setTimeout(() => {
    setToasts((ts) => ts.filter((t) => t.id !== id));
  }, 4000); // ‡πÅ‡∏™‡∏î‡∏á 4 ‡∏ß‡∏¥
}

  // ‚è±Ô∏è ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ UI)
  const [nowTs, setNowTs] = useState<number>(Date.now());
  useEffect(() => {
    const t = setInterval(() => setNowTs(Date.now()), 1000); // 1 ‡∏ß‡∏¥
    return () => clearInterval(t);
  }, []);

  // üîÅ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend (‡πÉ‡∏ä‡πâ no-store ‡∏Å‡∏±‡∏ô cache)
  const fetchAuctions = async (f: Filter) => {
    try {
      setLoading(true);
      const url = f === 'all' ? `${API}/auctions` : `${API}/auctions?status=${encodeURIComponent(f)}`;
      const res = await fetch(url, { cache: 'no-store' });
      const data: Auction[] = await res.json();
      setAuctions(data ?? []);
    } catch (err) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
      setAuctions([]);
    } finally {
      setLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å + ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  useEffect(() => {
    fetchAuctions(filter);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [filter]);

  // üîÑ Auto-refetch ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥ (‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)
  useEffect(() => {
    const t = setInterval(() => fetchAuctions(filter), 30000);
    return () => clearInterval(t);
  }, [filter]);

  const closeAuction = async (id: number) => {
    if (!confirm('‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?')) return;
    const res = await fetch(`${API}/auctions/${id}/close`, { method: 'PATCH' });
    const body = await res.json().catch(() => ({}));
    if (!res.ok) {
      alert(body?.error || '‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return;
    }
    fetchAuctions(filter);
  };

  const deleteAuctionRound = async (aid: number) => {
    if (!confirm('‡∏•‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ? (‡∏•‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î)')) return;
    const res = await fetch(`${API}/auctions/${aid}`, { method: 'DELETE' });
    const body: { message?: string; error?: string } = await res.json().catch(() => ({}));
    if (!res.ok) {
      alert(body?.error || '‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return;
    }
    alert(body?.message || '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    fetchAuctions(filter);
  };
  

  const deleteAuctionProduct = async (proId: number) => {
    if (!confirm('‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•? (‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏£‡∏≠‡∏ö)')) return;
    const res = await fetch(`${API}/auction-products/${proId}`, { method: 'DELETE' });
    const body = await res.json().catch(() => ({}));
    if (!res.ok) {
      alert(body?.error || '‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return;
    }
    alert('‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    fetchAuctions(filter);
  };

  const filtered = useMemo(
    () => (filter === 'all' ? auctions : auctions.filter((a) => a.status === filter)),
    [auctions, filter]
  );

  const fmtPrice = (n: number) =>
    n.toLocaleString('th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

  // üéØ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏±‡∏ô ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
 const remainLabelAndClass = (end_time: string, status: 'open' | 'closed') => {
  if (status === 'closed') return { text: '‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß', cls: 'text-gray-500' };

  const end = new Date(end_time).getTime();
  const diff = end - nowTs;
  if (diff <= 0) return { text: '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß', cls: 'text-red-600 font-medium' };

  let s = Math.floor(diff / 1000);
  const days = Math.floor(s / 86400); s %= 86400;
  const hours = Math.floor(s / 3600); s %= 3600;
  const minutes = Math.floor(s / 60); s %= 60;

  const parts: string[] = [];
  if (days) parts.push(`${days} ‡∏ß‡∏±‡∏ô`);
  if (hours || days) parts.push(`${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
  if (minutes || hours || days) parts.push(`${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
  parts.push(`${s} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);

  // üí° ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏µ‡πÇ‡∏î‡∏¢‡∏î‡∏π "‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
  const totalSeconds = diff / 1000;
  let cls = 'text-gray-700';
  if (totalSeconds <= 60 * 5) {        // <= 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    cls = 'text-orange-600 font-semibold';
  }
  if (totalSeconds <= 0) {
    cls = 'text-red-600 font-bold';
  }

  return { text: `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${parts.join(' ')}`, cls };
};

useEffect(() => {
  // ‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á open ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß (diff <= 0)
  const ended = auctions.filter(
    (a) => a.status === 'open' && new Date(a.end_time).getTime() - nowTs <= 0
  );

  if (ended.length > 0) {
    let needRefetch = false;
    for (const a of ended) {
      if (!notifiedRef.current.has(a.Aid)) {
        notifiedRef.current.add(a.Aid);
        pushToast(`"${a.PROname}" ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß`);
        needRefetch = true; // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      }
    }
    if (needRefetch) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô closed ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 30 ‡∏ß‡∏¥)
      fetchAuctions(filter);
    }
  }
}, [nowTs, auctions, filter]); // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô / ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô



  return (
    <div className="p-6 text-black">
      {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ + ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏î */}
      <div className="flex items-center justify-between mb-5 gap-2">
        <h1 className="text-xl font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•</h1>
        <div className="flex gap-2">
          <button
            onClick={() => fetchAuctions(filter)}
            className="border bg-white px-3 py-2 rounded hover:bg-gray-50"
            title="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
          >
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </button>
          <Link href="/admin/auction-products/new" className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
            + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
          </Link>
          <Link href="/admin/auctions/new" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            + ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
          </Link>
        </div>
      </div>

      {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
      <div className="mb-4 flex items-center gap-2">
        <label className="font-medium">‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value as Filter)}
          className="border px-3 py-2 rounded bg-white"
        >
          <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          <option value="open">‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•</option>
          <option value="closed">‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß</option>
        </select>
      </div>

      {loading ? (
        <div className="p-4 bg-white rounded border">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      ) : filtered.length === 0 ? (
        <div className="p-4 bg-white rounded border">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
      ) : (
        <table className="w-full bg-white border border-gray-200">
          <thead>
            <tr className="bg-gray-100">
              <th className="p-2 border">#</th>
              <th className="p-2 border">‡∏£‡∏π‡∏õ</th>
              <th className="p-2 border">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th className="p-2 border text-right">‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</th>
              <th className="p-2 border text-right">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</th>
              <th className="p-2 border text-center">‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•</th>
              <th className="p-2 border text-center">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th className="p-2 border text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((a, idx) => {
              const first = a.PROpicture?.split(',')[0]?.trim() ?? '';
              const img = first ? `${API}${first.startsWith('/') ? '' : '/'}${first}` : '';
              const endStr = a.end_time ? new Date(a.end_time).toLocaleString('th-TH') : '-';
              const remain = remainLabelAndClass(a.end_time, a.status);

              return (
                <tr key={a.Aid} className="odd:bg-white even:bg-gray-50">
                  <td className="p-2 border text-center">{idx + 1}</td>
                  <td className="p-2 border text-center">{img ? <img src={img} alt={a.PROname} className="h-12 mx-auto rounded" /> : '‚Äî'}</td>
                  <td className="p-2 border">
                    <Link href={`/admin/auctions/${a.Aid}`} className="text-blue-600 hover:underline">{a.PROname}</Link>
                  </td>
                  <td className="p-2 border text-right">{fmtPrice(a.start_price)} ‡∏ø</td>
                  <td className="p-2 border text-right">{fmtPrice(a.current_price)} ‡∏ø</td>
                  <td className="p-2 border text-center">
                    {endStr}
                    <div className={`text-xs mt-1 ${remain.cls}`}>{remain.text}</div>
                  </td>
                  <td className="p-2 border text-center">
                    <span className={`px-2 py-1 rounded text-white ${a.status === 'open' ? 'bg-green-500' : 'bg-gray-500'}`}>{a.status}</span>
                  </td>
                  <td className="p-2 border text-center">
                    <div className="flex flex-wrap items-center justify-center gap-2">
                      {a.status === 'open' && (
                        <>
                          <button className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onClick={() => closeAuction(a.Aid)}>
                            ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
                          </button>
                          <button
                            className="bg-gray-700 text-white px-2 py-1 rounded hover:bg-gray-800"
                            onClick={() => deleteAuctionRound(a.Aid)}
                            title="‡∏•‡∏ö‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î"
                          >
                            ‡∏•‡∏ö‡∏£‡∏≠‡∏ö
                          </button>
                        </>
                      )}
                      <button className="bg-gray-200 text-gray-800 px-2 py-1 rounded hover:bg-gray-300" onClick={() => deleteAuctionProduct(a.PROid)}>
                        ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      )}{/* Toasts */}
<div className="fixed right-4 bottom-4 space-y-2 z-50">
  {toasts.map((t) => (
    <div
      key={t.id}
      className="bg-black text-white/90 px-4 py-2 rounded-lg shadow-lg max-w-xs"
      role="alert"
    >
      {t.text}
    </div>
  ))}
</div>

    </div>
  );
}
