'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

const API = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:3000';

interface FormState {
  PROname: string;
  PROprice: string;   // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ parse ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
  PROpicture: string; // ‡πÄ‡∏Å‡πá‡∏ö path ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,
  PROrenume: string;  // (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) ‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  PROdetail:string; 


}

export default function AddAuctionProductPage() {
  const router = useRouter();

  const [form, setForm] = useState<FormState>({
    PROname: '',
    PROprice: '',
    PROpicture: '',
    PROrenume: '',
    PROdetail: '',
    
  });

  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [msg, setMsg] = useState<string>('');

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files) return;
    setSelectedFiles(Array.from(files));
  };

  const removeSelectedFile = (idx: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== idx));
  };

  const removeUploadedImage = (idx: number) => {
    const parts = form.PROpicture.split(',').filter(Boolean);
    parts.splice(idx, 1);
    setForm(prev => ({ ...prev, PROpicture: parts.join(',') }));
  };
  


  // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå) ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /upload ‚Üí ‡πÄ‡∏Å‡πá‡∏ö path ‡∏ó‡∏µ‡πà backend ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤
  const uploadSelectedImages = async () => {
    if (selectedFiles.length === 0) return;

    const uploaded: string[] = [];
    for (const file of selectedFiles) {
      const fd = new FormData();
      fd.append('image', file);

      try {
        const res = await fetch(`${API}/upload`, { method: 'POST', body: fd });
        const data = await res.json();
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ backend ‡∏ï‡∏≠‡∏ö { url: "/uploads/products/xxxx.png" }
        // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏ï‡∏±‡∏î "/uploads" ‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô "/products/xxxx.png"
        const path = String(data.url || '').replace('/uploads', '');
        if (path) uploaded.push(path);
      } catch {
        alert(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ${file.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
    }

    setForm(prev => ({
      ...prev,
      PROpicture: prev.PROpicture
        ? `${prev.PROpicture},${uploaded.join(',')}`
        : uploaded.join(','),
    }));

    setSelectedFiles([]);
  };

  // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Äú‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‚Äù
 const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  const productData = {
  PROname: form.PROname,
  PROprice: parseFloat(form.PROprice),
  PROpicture: form.PROpicture,
  PROrenume: form.PROrenume || null,
  PROdetail: form.PROdetail || null,
};

  const res = await fetch(`${API}/auction-products`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(productData),
  });

  if (res.ok) {
    alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    router.push("/admin/auction-products");
  } else {
    const body = await res.json().catch(() => ({}));
    alert(body?.error || "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
  }
};

  

  return (
    <div className="w-full max-w-2xl mx-auto p-6 bg-white rounded-xl shadow-lg text-black">
      <h1 className="text-2xl font-bold mb-6 text-center">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•</h1>

      <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-lg shadow border">
        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
          <input
            type="text"
            name="PROname"
            value={form.PROname}
            onChange={handleChange}
            required
            className="w-full bg-white text-gray-800 rounded-md border-gray-300 shadow-sm focus:ring-green-500 focus:border-green-500 placeholder-gray-400"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô Astrophytum superkabuto"
          />
        </div>

        {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‚Äînot start_price) */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (‡∏ö‡∏≤‡∏ó)</label>
          <input
            type="number"
            name="PROprice"
            value={form.PROprice}
            onChange={handleChange}
            min={0}
            step="0.01"
            required
            className="w-full rounded-md bg-white text-gray-800 border-gray-300 shadow-sm focus:ring-green-500 focus:border-green-500 placeholder-gray-400"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 350.00"
          />
        </div>

        
        {/* (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) ‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏¢‡πÉ‡∏ô/‡∏£‡∏´‡∏±‡∏™ */}
<div>
  <label className="block text-sm font-medium text-gray-700 mb-1">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
  <input
    type="number"
    name="PROrenume"
    value={form.PROrenume}
    onChange={handleChange}
    className="w-full rounded-md bg-white text-gray-800 border-gray-300 shadow-sm focus:ring-green-500 focus:border-green-500 placeholder-gray-400"
    placeholder="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3..."
  />
</div>

{/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
<div>
  <label className="block mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
  <textarea
    name="PROdetail"
    value={form.PROdetail}
    onChange={handleChange}
    className="border rounded w-full p-2 h-24"
    placeholder="‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
  />
</div>



        {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
          <input
            type="file"
            accept="image/*"
            multiple
            onChange={handleFileChange}
            className="w-full rounded-md bg-white text-gray-800 border-gray-300"
          />

          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î) */}
          {selectedFiles.length > 0 && (
            <div className="mt-2 space-y-1">
              {selectedFiles.map((f, i) => (
                <div key={i} className="flex items-center justify-between text-sm text-gray-600">
                  <span>{f.name}</span>
                  <button type="button" onClick={() => removeSelectedFile(i)} className="text-red-500 hover:text-red-700">
                    ‚ùå
                  </button>
                </div>
              ))}
              <button
                type="button"
                onClick={uploadSelectedImages}
                className="mt-2 bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
              >
                üì§ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              </button>
            </div>
          )}

          {/* ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß */}
          {form.PROpicture && (
            <div className="flex flex-wrap gap-3 mt-4 max-h-64 overflow-auto">
              {form.PROpicture.split(',').filter(Boolean).map((p, i) => (
                <div key={i} className="relative w-32 h-32">
                  <img
                    src={`${API}${p}`}
                    alt={`preview-${i}`}
                    className="w-full h-full object-cover rounded border"
                  />
                  <button
                    type="button"
                    onClick={() => removeUploadedImage(i)}
                    className="absolute top-1 right-1 bg-red-500 text-white rounded-full px-1"
                  >
                    √ó
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
        

        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚Äî ‡∏ï‡∏£‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô auction */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
          <input
            type="text"
            value="auction"
            disabled
            className="w-full rounded-md bg-gray-100 text-gray-700 border-gray-300"
          />
        </div>

        <button
          type="submit"
          className="w-full bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700 transition"
        >
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚Äú‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‚Äù
        </button>
      </form>
    </div>
  );
}
