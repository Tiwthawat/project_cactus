'use client';

import { useParams } from 'next/navigation';
import { useEffect, useMemo, useState } from 'react';

type Status = 'open' | 'closed';


interface Auction {
  Aid: number;
  start_price: number | string;
  current_price: number | string;
  min_increment?: number | string;
  end_time: string; // ISO
  status: Status;

  PROid: number;
  PROname: string;
  PROpicture: string; // "a.jpg,b.jpg"
  PROdetail?: string;
  PROdesc?: string;

  seller_name?: string;
}

const API = process.env.NEXT_PUBLIC_API_BASE as string;

// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå URL ‡πÄ‡∏ï‡πá‡∏°
const toPics = (s?: string) =>
  (s || '')
    .split(',')
    .map((p) => p.trim())
    .filter(Boolean)
    .map((p) =>
      /^https?:\/\//.test(p) ? p : `${API}${p.startsWith('/') ? '' : '/'}${p}`
    );

const baht = (n: number) =>
  new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB',
  }).format(n);

export default function AuctionDetailPage() {
  const { id } = useParams<{ id: string }>();

  // ---- state ‡∏´‡∏•‡∏±‡∏Å ----
  const [data, setData] = useState<Auction | null>(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState('');
  const [posting, setPosting] = useState(false);
  const [amount, setAmount] = useState<number | ''>(''); // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏¥‡∏î

  // gallery
  const pics = toPics(data?.PROpicture);
  const [mainImage, setMainImage] = useState<string>('');
  const mainImgFull = mainImage || pics[0] || '';
  const [now, setNow] = useState(() => Date.now());

  useEffect(() => {
    if (!data) return;
    if (new Date(data.end_time).getTime() <= Date.now()) return; // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πà‡∏á
    const t = setInterval(() => setNow(Date.now()), 1000);
    return () => clearInterval(t);
  }, [data?.end_time]);


  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î + poll ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥
  useEffect(() => {
    let t: any;
    const load = async () => {
      try {
        const res = await fetch(`${API}/auction/${id}`, {
          credentials: 'include',
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json: Auction = await res.json();

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ numeric ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å backend
        const cur = Number(json.current_price ?? 0);
        const step = Math.max(1, Number(json.min_increment ?? 1));
        const startBid = cur + step;

        setData(json);
        setErr('');
        setAmount((prev) => (prev === '' ? startBid : prev));

        // ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
        const arr = toPics(json.PROpicture);
        setMainImage(arr[0] || '');
      } catch (e: any) {
        setErr(e.message || '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } finally {
        setLoading(false);
      }
    };
    load();
    t = setInterval(load, 3000);
    return () => clearInterval(t);
  }, [id]);

  // ‡∏Ñ‡πà‡∏≤ numeric ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô UI
  const cur = Number(data?.current_price ?? 0);
  const step = Math.max(1, Number(data?.min_increment ?? 1));
  const requiredMin = cur + step;


  // ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á (‡∏ß‡∏¥‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  const left = useMemo(() => {
    if (!data) return '';
    const ms = Math.max(0, new Date(data.end_time).getTime() - now);
    const s = Math.floor(ms / 1000);
    const h = Math.floor(s / 3600);
    const m = Math.floor((s % 3600) / 60);
    const ss = s % 60;
    return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(ss).padStart(2, '0')}`;
  }, [data?.end_time, now]);


  const closedByTime = data
    ? new Date(data.end_time).getTime() <= Date.now()
    : false;
  const closed = data?.status === 'closed' || closedByTime;

  // ‡∏™‡πà‡∏á‡∏ö‡∏¥‡∏î
  const submitBid = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!data || amount === '') return;

    const min = cur + step;
    if (Number(amount) < min) {
      setErr(`‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${min.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);
      return;
    }

    try {
      setPosting(true);
      setErr('');
      const res = await fetch(`${API}/auctions/${data.Aid}/bid`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ amount }),
      });
      const json = await res.json().catch(() => ({}));
      if (!res.ok || json?.ok === false) {
        throw new Error(json?.error || json?.message || '‡∏ö‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      const newPrice: number = Number(
        json.new_price ?? json.current_price ?? amount
      );

      setData({ ...data, current_price: newPrice });
      setAmount(newPrice + step);
    } catch (e: any) {
      setErr(e.message || '‡∏ö‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setPosting(false);
    }
  };

  if (loading) return <main className="pt-36 px-6">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶</main>;
  if (!data)
    return (
      <main className="pt-36 px-6 text-red-600">
        {err || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ'}
      </main>
    );

  const product = {
    Pname: data.PROname,
    Ppicture: data.PROpicture,
    Pdetail: data.PROdetail ?? '',
    Pprice: cur,
    Pid: data.PROid,
    Pstatus: data.status,
  };

  return (
    <div className="p-10 pt-40 max-w-6xl mx-auto bg-white text-black space-y-8">
      <div className="flex flex-col lg:flex-row gap-10 items-start">
        {/* ‚úÖ ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ */}
        <div className="w-full lg:w-1/2">
          <h1 className="text-2xl font-bold mb-4">{product.Pname}</h1>

          {/* ‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å */}
          <div className="w-full aspect-[4/3] rounded-lg overflow-hidden shadow">
            {mainImgFull ? (
              <img
                src={mainImgFull}
                alt={product.Pname}
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="w-full h-full bg-gray-100 flex items-center justify-center text-gray-400">
                ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
              </div>
            )}
          </div>

          {/* Thumbnail */}
          {pics.length > 0 && (
            <div className="flex gap-2 mt-4">
              {pics.map((full, i) => (
                <img
                  key={i}
                  src={full}
                  className={`w-20 h-20 object-cover rounded cursor-pointer border hover:border-red-500 ${mainImgFull === full ? 'ring-2 ring-red-500' : ''
                    }`}
                  onClick={() => setMainImage(full)}
                  alt={`thumb-${i}`}
                />
              ))}
            </div>
          )}
        </div>

        {/* ‚úÖ ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤ */}
        <div className="w-full lg:w-1/2 flex flex-col gap-6">
          {/* ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô */}
          <div className="bg-yellow-100 border border-yellow-300 p-4 rounded shadow">
            <p className="text-sm font-medium text-red-600">üìå ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô</p>
            <ul className="text-sm text-gray-700 list-disc ml-4 mt-1">
              <li>
                ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
              </li>
              <li>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ</li>
            </ul>
          </div>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <div className="bg-pink-100 p-4 rounded border border-pink-300 shadow">
            <p className="font-medium text-gray-800 border-b pb-1 mb-2">
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
            </p>
            <div className="flex items-center gap-2">
              <span>üë•</span>
              <p>{data.seller_name ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
            </div>
          </div>

          {/* ‚ù§Ô∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ */}
          <div className="space-y-3">
            <button className="border border-red-500 text-red-500 px-4 py-2 rounded hover:bg-red-100 text-sm w-full">
              ‚ù§Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
            </button>

            <h2 className="text-[28px] font-extrabold text-black">
              ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà{' '}
              <span className="text-red-600 text-[36px] font-extrabold">
                {baht(product.Pprice)}
              </span>
            </h2>

            <div className="text-sm text-gray-700">
              ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:{' '}
              <span className={`font-mono ${closed ? 'text-red-600' : ''}`}>
                {closed ? '‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß' : left}
              </span>
            </div>


           <form onSubmit={submitBid} noValidate className="space-y-2">
  <div className="flex flex-col gap-2">
    
     
      <p className="text-sm text-gray-700">
  ‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: ‚â• <span className="font-bold text-red-600">{step} ‡∏ö‡∏≤‡∏ó</span>
</p>
    

    <div className="flex gap-2">
      <input
        type="number"
        min={requiredMin}
        step={step}
        required
        value={amount}
        onChange={(e) => setAmount(Math.floor(Number(e.target.value)))}
        disabled={posting || closed}
        className="w-full px-3 py-2 rounded border
          bg-white text-black placeholder-gray-400
          focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500
          disabled:opacity-50"
      />
      <button
        type="submit"
        disabled={posting || closed}
        className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded whitespace-nowrap"
      >
        {posting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏¥‡∏î‚Ä¶' : '‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'}
      </button>
    </div>
  </div>

  {err && <p className="text-red-600 text-sm">{err}</p>}
</form>


            <div className="text-sm text-gray-700">
              ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {requiredMin.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
            </div>

            <p className="text-xs text-gray-700">
              ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: cac:{String(product.Pid).padStart(4, '0')}
            </p>
            <p className="text-xs text-gray-700">
              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {closed ? 'closed' : 'open'}
            </p>
          </div>
        </div>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
      <div>
        <h2 className="font-semibold text-xl mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
        <div className="whitespace-pre-line p-3 border bg-slate-50 rounded text-sm text-gray-800">
          {product.Pdetail || '-'}
        </div>
      </div>
    </div>
  );
}
